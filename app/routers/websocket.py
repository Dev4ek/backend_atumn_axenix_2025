from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Query
from typing import Dict, Optional, Set
from dataclasses import dataclass, field
from datetime import datetime
import json
import uuid
import asyncio
import logging

logger = logging.getLogger(__name__)

router = APIRouter()


@dataclass
class PeerConnection:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user_id: str
    websocket: WebSocket
    audio_on: bool = True
    video_on: bool = False
    screen_sharing: bool = False
    connected_at: datetime = field(default_factory=datetime.utcnow)
    last_ping: datetime = field(default_factory=datetime.utcnow)
    # –ù–∞–±–æ—Ä peer_id —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    active_rtc_connections: Set[str] = field(default_factory=set)


@dataclass
class Room:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"""
    code: str
    peers: Dict[str, PeerConnection] = field(default_factory=dict)
    created_at: datetime = field(default_factory=datetime.utcnow)


# {room_code: Room}
active_rooms: Dict[str, Room] = {}

# –õ–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
rooms_lock = asyncio.Lock()


@router.websocket("/ws/room/{room_code}")
async def room_websocket(
    websocket: WebSocket, 
    room_code: str,
    token: Optional[str] = Query(None),
):
    """
    WebSocket endpoint –¥–ª—è –≤–∏–¥–µ–æ—á–∞—Ç–∞
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
    - WebRTC signaling (offer/answer/ice_candidate)
    - –ú–µ–¥–∏–∞ —Å—Ç–∞—Ç—É—Å—ã (mic/camera/screen)
    - Heartbeat –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∂–∏–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    """
    await websocket.accept()
    user_id = str(uuid.uuid4())
    
    logger.info(f"[WS] üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {user_id} ‚Üí –∫–æ–º–Ω–∞—Ç–∞ '{room_code}'")
    
    peer: Optional[PeerConnection] = None
    
    try:
        # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
        async with rooms_lock:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if room_code not in active_rooms:
                active_rooms[room_code] = Room(code=room_code)
                logger.info(f"[WS] üè† –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ '{room_code}'")
            
            room = active_rooms[room_code]
            
            # –°–æ–∑–¥–∞–µ–º peer
            peer = PeerConnection(
                user_id=user_id,
                websocket=websocket
            )
            room.peers[user_id] = peer
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            other_peers = [
                {
                    "id": p.user_id,
                    "audioOn": p.audio_on,
                    "videoOn": p.video_on,
                    "screenSharing": p.screen_sharing
                }
                for uid, p in room.peers.items() 
                if uid != user_id
            ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
        await websocket.send_json({
            "type": "active_peers",
            "peers": other_peers,
            "your_id": user_id
        })
        logger.info(f"[WS] üìã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(other_peers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Üí {user_id}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
        await asyncio.sleep(0.05)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        await broadcast_to_room(room_code, {
            "type": "peer_joined",
            "peer": {
                "id": user_id,
                "audioOn": peer.audio_on,
                "videoOn": peer.video_on,
                "screenSharing": peer.screen_sharing
            }
        }, exclude=user_id)
        
        logger.info(f"[WS] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {user_id}. –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(room.peers)}")
        
        # === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
        while True:
            try:
                # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                data = await asyncio.wait_for(websocket.receive_text(), timeout=30.0)
                message = json.loads(data)
                
                msg_type = message.get("type")
                logger.debug(f"[WS] üì® {user_id}: {msg_type}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                async with rooms_lock:
                    if peer:
                        peer.last_ping = datetime.utcnow()
                
                # === WebRTC SIGNALING ===
                if msg_type in ["offer", "answer", "ice_candidate"]:
                    await handle_webrtc_signal(room_code, user_id, message)
                
                # === –ú–ï–î–ò–ê –°–¢–ê–¢–£–°–´ ===
                elif msg_type == "media_status":
                    await handle_media_status(room_code, user_id, message)
                
                # === HEARTBEAT ===
                elif msg_type == "ping":
                    await websocket.send_json({"type": "pong"})
                
                # === –£–ü–†–ê–í–õ–ï–ù–ò–ï RTC –°–û–ï–î–ò–ù–ï–ù–ò–Ø–ú–ò ===
                elif msg_type == "rtc_connected":
                    # –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–æ–æ–±—â–∞–µ—Ç —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å peer
                    target_id = message.get("peer_id")
                    if target_id:
                        async with rooms_lock:
                            if peer:
                                peer.active_rtc_connections.add(target_id)
                        logger.info(f"[WS] üîó RTC —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {user_id} ‚Üî {target_id}")
                
                elif msg_type == "rtc_disconnected":
                    # –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–æ–æ–±—â–∞–µ—Ç —á—Ç–æ —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å peer
                    target_id = message.get("peer_id")
                    if target_id:
                        async with rooms_lock:
                            if peer:
                                peer.active_rtc_connections.discard(target_id)
                        logger.info(f"[WS] üîå RTC —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ: {user_id} ‚Üî {target_id}")
                
                else:
                    logger.warning(f"[WS] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {msg_type} –æ—Ç {user_id}")
            
            except asyncio.TimeoutError:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–≤–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                try:
                    await websocket.send_json({"type": "ping"})
                except Exception:
                    logger.warning(f"[WS] ‚è±Ô∏è Timeout –¥–ª—è {user_id}, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ")
                    break
    
    except WebSocketDisconnect:
        logger.info(f"[WS] üî¥ –û—Ç–∫–ª—é—á–∏–ª—Å—è: {user_id}")
    
    except Exception as e:
        logger.error(f"[WS] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {user_id}: {e}", exc_info=True)
    
    finally:
        # === CLEANUP ===
        await cleanup_peer(room_code, user_id)


async def handle_webrtc_signal(room_code: str, from_id: str, message: dict):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC signaling —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        room_code: –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
        from_id: ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        message: –°–æ–æ–±—â–µ–Ω–∏–µ (offer/answer/ice_candidate)
    """
    msg_type = message.get("type")
    target_id = message.get("target")
    
    if not target_id:
        logger.warning(f"[WS] ‚ö†Ô∏è {msg_type} –±–µ–∑ target –æ—Ç {from_id}")
        return
    
    async with rooms_lock:
        room = active_rooms.get(room_code)
        if not room:
            logger.warning(f"[WS] ‚ö†Ô∏è –ö–æ–º–Ω–∞—Ç–∞ {room_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        target_peer = room.peers.get(target_id)
        if not target_peer:
            logger.warning(f"[WS] ‚ö†Ô∏è Target {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ {room_code}")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º from –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message["from"] = from_id
        
        try:
            await target_peer.websocket.send_json(message)
            logger.debug(f"[WS] ‚úÖ {msg_type}: {from_id} ‚Üí {target_id}")
        except Exception as e:
            logger.error(f"[WS] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {msg_type} –∫ {target_id}: {e}")
            # –ü–æ–º–µ—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ –º–µ—Ä—Ç–≤–æ–µ
            await cleanup_peer(room_code, target_id)


async def handle_media_status(room_code: str, from_id: str, message: dict):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞-—Å—Ç–∞—Ç—É—Å–∞ (mic/camera/screen)
    
    Args:
        room_code: –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
        from_id: ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
    """
    status = message.get("status", {})
    audio_on = status.get("audioOn")
    video_on = status.get("videoOn")
    screen_sharing = status.get("screenSharing")
    
    logger.info(
        f"[WS] üé¨ –ú–µ–¥–∏–∞ —Å—Ç–∞—Ç—É—Å –æ—Ç {from_id}: "
        f"audio={audio_on}, video={video_on}, screen={screen_sharing}"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ peer
    async with rooms_lock:
        room = active_rooms.get(room_code)
        if room and from_id in room.peers:
            peer = room.peers[from_id]
            if audio_on is not None:
                peer.audio_on = audio_on
            if video_on is not None:
                peer.video_on = video_on
            if screen_sharing is not None:
                peer.screen_sharing = screen_sharing
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
    await broadcast_to_room(room_code, {
        "type": "media_status",
        "from": from_id,
        "status": {
            "audioOn": audio_on,
            "videoOn": video_on,
            "screenSharing": screen_sharing
        }
    }, exclude=from_id)


async def broadcast_to_room(
    room_code: str, 
    message: dict, 
    exclude: Optional[str] = None
):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
    
    Args:
        room_code: –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        exclude: User ID –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    async with rooms_lock:
        room = active_rooms.get(room_code)
        if not room:
            return
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≤–Ω–µ lock
        peers_to_notify = [
            (uid, peer.websocket) 
            for uid, peer in room.peers.items() 
            if uid != exclude
        ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —É–¥–µ—Ä–∂–∞–Ω–∏—è lock
    disconnected = []
    for user_id, ws in peers_to_notify:
        try:
            # –¢–∞–π–º–∞—É—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å
            await asyncio.wait_for(ws.send_json(message), timeout=2.0)
            logger.debug(f"[BROADCAST] ‚úÖ ‚Üí {user_id}")
        except asyncio.TimeoutError:
            logger.error(f"[BROADCAST] ‚è±Ô∏è Timeout –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫ {user_id}")
            disconnected.append(user_id)
        except Exception as e:
            logger.error(f"[BROADCAST] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫ {user_id}: {e}")
            disconnected.append(user_id)
    
    # –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for user_id in disconnected:
        await cleanup_peer(room_code, user_id)


async def cleanup_peer(room_code: str, user_id: str):
    """
    –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    
    Args:
        room_code: –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
        user_id: ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    async with rooms_lock:
        room = active_rooms.get(room_code)
        if not room:
            return
        
        # –£–¥–∞–ª—è–µ–º peer
        peer = room.peers.pop(user_id, None)
        if peer:
            logger.info(f"[WS] üóëÔ∏è –£–¥–∞–ª–µ–Ω {user_id} –∏–∑ –∫–æ–º–Ω–∞—Ç—ã '{room_code}'")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket –µ—Å–ª–∏ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç
            try:
                await peer.websocket.close()
            except Exception:
                pass
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É
        if len(room.peers) == 0:
            del active_rooms[room_code]
            logger.info(f"[WS] üèöÔ∏è –ö–æ–º–Ω–∞—Ç–∞ '{room_code}' —É–¥–∞–ª–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)")
            return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await broadcast_to_room(room_code, {
        "type": "peer_left",
        "peer_id": user_id
    })


# === –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê: –û–ß–ò–°–¢–ö–ê –ú–ï–†–¢–í–´–• –°–û–ï–î–ò–ù–ï–ù–ò–ô ===
async def cleanup_stale_connections():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    –ó–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ lifespan –∏–ª–∏ startup event
    """
    while True:
        await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        try:
            now = datetime.utcnow()
            stale_threshold = 120  # 2 –º–∏–Ω—É—Ç—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
            async with rooms_lock:
                for room_code, room in list(active_rooms.items()):
                    stale_peers = [
                        uid for uid, peer in room.peers.items()
                        if (now - peer.last_ping).total_seconds() > stale_threshold
                    ]
                    
                    for uid in stale_peers:
                        logger.warning(f"[CLEANUP] ‚ö†Ô∏è –£–¥–∞–ª—è—é –∑–∞–≤–∏—Å—à–∏–π peer: {uid}")
            
            # Cleanup –≤–Ω–µ lock
            for uid in stale_peers:
                await cleanup_peer(room_code, uid)
        
        except Exception as e:
            logger.error(f"[CLEANUP] ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}", exc_info=True)
