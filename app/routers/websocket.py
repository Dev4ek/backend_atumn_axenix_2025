import asyncio
from fastapi import APIRouter, Query, WebSocket, WebSocketDisconnect
from typing import Dict
import json
import uuid

router = APIRouter()

# {room_code: {user_id: websocket}}
active_connections: Dict[str, Dict[str, WebSocket]] = {}


@router.websocket("/ws/room/{room_code}")
async def room_websocket(websocket: WebSocket, room_code: str, token_room: str = Query(..., description="–¢–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ")):
    await websocket.accept()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    if room_code not in active_connections:
        active_connections[room_code] = {}
    active_connections[room_code][token_room] = websocket
    
    try:
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = [t for t in active_connections[room_code].keys() if t != token_room]
        await websocket.send_json({
            "type": "active_peers",
            "peers": active_users
        })
        
        # –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await broadcast(room_code, {
            "type": "peer_joined",
            "peer_token": token_room
        }, exclude=token_room)
        
        while True:
            data = await websocket.receive_text()
            message = json.loads(data)
            
            # WebRTC signaling
            if message.get("type") in ["offer", "answer", "ice_candidate"]:
                target_id = message.get("target")
                if target_id and target_id in active_connections.get(room_code, {}):
                    target_ws = active_connections[room_code][target_id]
                    message["from"] = token_room
                    await target_ws.send_json(message)
                    
    except WebSocketDisconnect:
        
        # –£–¥–∞–ª–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if room_code in active_connections and token_room in active_connections[room_code]:
            del active_connections[room_code][token_room]
            
        # –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö
        await broadcast(room_code, {
            "type": "peer_left",
            "peer_token": token_room
        })
        
        # –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è
        if room_code in active_connections and len(active_connections[room_code]) == 0:
            del active_connections[room_code]
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞: {room_code}")


async def broadcast(room_code: str, message: dict, exclude: str = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ"""
    if room_code not in active_connections:
        return
    
    disconnected = []
    for user_id, ws in active_connections[room_code].items():
        if user_id == exclude:
            continue
        try:
            await ws.send_json(message)
        except Exception as e:
            disconnected.append(user_id)
    
    # –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö
    for user_id in disconnected:
        if user_id in active_connections[room_code]:
            del active_connections[room_code][user_id]
 