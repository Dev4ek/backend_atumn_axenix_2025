from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Query
from typing import Dict, Optional
import json
import uuid
import asyncio
import logging

logger = logging.getLogger(__name__)

router = APIRouter()

# {room_code: {user_id: websocket}}
active_connections: Dict[str, Dict[str, WebSocket]] = {}


@router.websocket("/ws/room/{room_code}")
async def room_websocket(
    websocket: WebSocket, 
    room_code: str,
    token: Optional[str] = Query(None),
):
    await websocket.accept()

    user_id = str(uuid.uuid4())
    
    logger.info(f"[WS] üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {user_id} ‚Üí {room_code}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if room_code not in active_connections:
        active_connections[room_code] = {}
    active_connections[room_code][user_id] = websocket
    
    try:
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        active_users = [uid for uid in active_connections[room_code].keys() 
                        if uid != user_id]
        logger.info(f"[WS] –û—Ç–ø—Ä–∞–≤–ª—è—é active_peers –∫ {user_id}: {len(active_users)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        await websocket.send_json({
            "type": "active_peers",
            "peers": active_users
        })
        await asyncio.sleep(0.2)
        
        # 3. –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        logger.info(f"[WS] –£–≤–µ–¥–æ–º–ª—è—é –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ {user_id}")
        await broadcast(room_code, {
            "type": "peer_joined",
            "peer_token": user_id
        }, exclude=user_id)
        
        logger.info(f"[WS] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {user_id}")
        logger.info(f"[WS] –í—Å–µ–≥–æ –≤ –∫–æ–º–Ω–∞—Ç–µ '{room_code}': {len(active_connections[room_code])}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        while True:
            data = await websocket.receive_text()
            message = json.loads(data)
            
            msg_type = message.get("type")
            logger.debug(f"[WS] üì® {user_id} ‚Üí {msg_type}")
            
            # WebRTC signaling
            if msg_type in ["offer", "answer", "ice_candidate"]:
                target_id = message.get("target")
                if target_id and target_id in active_connections.get(room_code, {}):
                    target_ws = active_connections[room_code][target_id]
                    message["from"] = user_id
                    await target_ws.send_json(message)
                    logger.debug(f"[WS] ‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ {msg_type}: {user_id} ‚Üí {target_id}")
                else:
                    logger.warning(f"[WS] ‚ö†Ô∏è Target {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # ‚úÖ –ù–û–í–û–ï: –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ–¥–∏–∞ (mic/camera)
            elif msg_type == "media_status":
                status = message.get("status", {})
                audio_on = status.get("audioOn", True)
                video_on = status.get("videoOn", True)
                
                logger.info(f"[WS] üé¨ –°—Ç–∞—Ç—É—Å –º–µ–¥–∏–∞ –æ—Ç {user_id}: audio={audio_on}, video={video_on}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                await broadcast(room_code, {
                    "type": "media_status",
                    "from": user_id,
                    "status": {
                        "audioOn": audio_on,
                        "videoOn": video_on
                    }
                }, exclude=user_id)
            
            else:
                logger.warning(f"[WS] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_type}")
    
    except WebSocketDisconnect:
        logger.info(f"[WS] üî¥ –û—Ç–∫–ª—é—á–∏–ª—Å—è: {user_id}")
    except Exception as e:
        logger.error(f"[WS] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {user_id}: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if room_code in active_connections and user_id in active_connections[room_code]:
            del active_connections[room_code][user_id]
            logger.info(f"[WS] –£–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã: {user_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        await broadcast(room_code, {
            "type": "peer_left",
            "peer_token": user_id
        })
        
        # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        if room_code in active_connections and len(active_connections[room_code]) == 0:
            del active_connections[room_code]
            logger.info(f"[WS] –ö–æ–º–Ω–∞—Ç–∞ '{room_code}' –ø—É—Å—Ç–∞, —É–¥–∞–ª–µ–Ω–∞")


async def broadcast(room_code: str, message: dict, exclude: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã (–∫—Ä–æ–º–µ exclude)
    
    Args:
        room_code: –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        exclude: User ID –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    if room_code not in active_connections:
        return
    
    disconnected = []
    
    for user_id, ws in active_connections[room_code].items():
        if user_id == exclude:
            continue
        
        try:
            await ws.send_json(message)
            logger.debug(f"[BROADCAST] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
        except Exception as e:
            logger.error(f"[BROADCAST] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
            disconnected.append(user_id)
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for user_id in disconnected:
        if user_id in active_connections[room_code]:
            del active_connections[room_code][user_id]
            logger.info(f"[BROADCAST] –£–¥–∞–ª–µ–Ω –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π: {user_id}")
